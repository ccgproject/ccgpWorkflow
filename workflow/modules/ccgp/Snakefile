import pandas as pd
import os
include: "common.smk"

configfile: "config/config.yaml"

samples = pd.read_table(config["samples"], sep=",", dtype=str).replace(' ', '_', regex=True)
REFGENOME = samples['refGenome'].unique().tolist()

rule all:
    input:
        expand("results/{refGenome}/CCGP/{prefix}_top.froh", refGenome=REFGENOME, prefix=config['final_prefix']),
        expand("results/{refGenome}/CCGP/{prefix}.1.windowed.pi", refGenome=REFGENOME, prefix=config['final_prefix']),
        expand("results/{refGenome}/CCGP/{prefix}_annotated_pruned_0.3.vcf.gz",refGenome=REFGENOME, prefix=config['final_prefix']),
        expand("results/{refGenome}/CCGP/{prefix}_annotated_pruned_0.3.dist", refGenome=REFGENOME, prefix=config['final_prefix'])
        #expand("results/{refGenome}/CCGP/{prefix}.stat.gz", refGenome=REFGENOME, prefix=config['final_prefix']),
        #expand("results/{refGenome}/CCGP/{prefix}.LD_decay.png", refGenome=REFGENOME, prefix=config['final_prefix'])

rule roh:
    input:
        vcf = "results/{refGenome}/{prefix}_clean_snps.vcf.gz",
    output:
        roh = "results/{refGenome}/CCGP/{prefix}.roh.gz",
        rg = "results/{refGenome}/CCGP/{prefix}.rg.roh"
    conda:
        "envs/roh.yml"
    resources:
       mem_mb = 128000,
       threads = 10
    shell:
        """
        bcftools roh --threads 10 -G30 --AF-dflt 0.4 -O z -o {output.roh} {input.vcf}
        zgrep RG {output.roh} > {output.rg}
        """

#will re write roh to 

rule froh:
    input:
        roh = "results/{refGenome}/CCGP/{prefix}.rg.roh",
        fai = "results/{refGenome}/data/genome/{refGenome}.fna.fai",
    output:
        froh = "results/{refGenome}/CCGP/{prefix}.froh",
        top = "results/{refGenome}/CCGP/{prefix}_top.froh"
    run:
        calc_ruh(input.roh, input.fai, output.froh)

rule pi:
    input:
        vcf = "results/{refGenome}/{prefix}_clean_snps.vcf.gz",
        top = "results/{refGenome}/CCGP/{prefix}_top.froh"
    output:
        pi1 = "results/{refGenome}/CCGP/{prefix}.1.windowed.pi",
        pi2 = "results/{refGenome}/CCGP/{prefix}.2.windowed.pi"
    conda:
        "envs/vcftools_individuals.yml"
    params:
        prefix = lambda wc, input: input.top.replace("_top.froh", ""),
    shell:
        """
        
        for i in 1 2
        do
            SAMPLE=$(sed -n "${{i}}p" {input.top})
            vcftools --indv $SAMPLE --gzvcf {input.vcf} --out {params.prefix}.${{i}} --window-pi 10000
        done

        """

#next step is R script that reads in the rg.roh and the pi data. Then plots a couple of examples

rule annotate:
    input:
        vcf = "results/{refGenome}/{prefix}_clean_snps.vcf.gz",
    output:
        ann = "results/{refGenome}/CCGP/{prefix}_annotated.vcf.gz"
    conda:
        "envs/roh.yml"
    shell:
        """
        bcftools annotate --set-id '%CHROM\_%POS\_%REF\_%FIRST_ALT' -O z -o {output.ann} {input.vcf}
        """

#bcftools +prune -w 20000bp -n 1 -N rand -O z -o {output.ld} {input.vcf}

rule plinkld:
    input:
        vcf = "results/{refGenome}/CCGP/{prefix}_annotated.vcf.gz"
    output:
        ld = "results/{refGenome}/CCGP/{prefix}_0.3.prune.in",
        ld2 = "results/{refGenome}/CCGP/{prefix}_0.3.prune.out",
        ld3 = "results/{refGenome}/CCGP/{prefix}_0.6.prune.in",
        ld4 = "results/{refGenome}/CCGP/{prefix}_0.6.prune.out"
    resources:
       threads = 10,
       mem_mb = 128000
    params:
        prefix1 = lambda wc, input: input.vcf.replace("_annotated.vcf.gz", "_0.3"),
        prefix2 = lambda wc, input: input.vcf.replace("_annotated.vcf.gz", "_0.6")
    conda:
        "envs/plink.yml"
    shell:
        """
        plink2 --vcf {input.vcf} --make-bed --indep-pairwise 50 5 0.6 --out {params.prefix1} --allow-extra-chr --autosome-num 95 --const-fid --bad-freqs
        plink2 --vcf {input.vcf} --make-bed --indep-pairwise 50 5 0.3 --out {params.prefix2} --allow-extra-chr --autosome-num 95 --const-fid --bad-freqs 
        """

#outname = lambda wc, input: input.vcf.replace("_annotated.vcf.gz", "_pruned")
#plink2 --extract {output.ld} --bfile {params.prefix} --make-bed --out {params.outname} --allow-extra-chr --autosome-num 95 --const-fid --bad-freqs

#is it AF or random?
#run roh with and without filtering? then correlate

rule prunevcf:
    input:
        vcf = "results/{refGenome}/CCGP/{prefix}_annotated.vcf.gz",
        ld3 = "results/{refGenome}/CCGP/{prefix}_0.3.prune.in",
        ld6 = "results/{refGenome}/CCGP/{prefix}_0.6.prune.in"
    output:
        pruned3 = "results/{refGenome}/CCGP/{prefix}_annotated_pruned_0.3.vcf.gz",
        pruned6 = "results/{refGenome}/CCGP/{prefix}_annotated_pruned_0.6.vcf.gz",
    conda:
        "envs/roh.yml"
    shell:
        """
        bcftools view -i 'ID=@{input.ld3}' -O z -o {output.pruned3} {input.vcf}
        bcftools view -i 'ID=@{input.ld6}' -O z -o {output.pruned6} {input.vcf}
        """

rule plink:
    """
    Call plink PCA.
    """
    input:
        vcf = "results/{refGenome}/{prefix}_clean_snps.vcf.gz",
        pruned3 = "results/{refGenome}/CCGP/{prefix}_annotated_pruned_0.3.vcf.gz",
        pruned6 = "results/{refGenome}/CCGP/{prefix}_annotated_pruned_0.6.vcf.gz"     
    params:
        prefix = lambda wc, input: input.pruned3.replace("_annotated_pruned_0.3.vcf.gz", "_filtered"),
        prefix3 = lambda wc, input: input.pruned3.replace(".vcf.gz", ""),
        prefix6 = lambda wc, input: input.pruned6.replace(".vcf.gz", "")
    output: 
        dist = "results/{refGenome}/CCGP/{prefix}_filtered.dist",
        distid = "results/{refGenome}/CCGP/{prefix}_filtered.dist.id",
        dist3 = "results/{refGenome}/CCGP/{prefix}_annotated_pruned_0.3.dist",
        distid3 = "results/{refGenome}/CCGP/{prefix}_annotated_pruned_0.3.dist.id",
        dist6 = "results/{refGenome}/CCGP/{prefix}_annotated_pruned_0.6.dist",
        distid6 = "results/{refGenome}/CCGP/{prefix}_annotated_pruned_0.6.dist.id"
    conda:
        "envs/plink.yml"
    shell:
        #plink 1.9 for distance matrix
        """
        plink --vcf {input.vcf} --out {params.prefix} --allow-extra-chr --autosome-num 95 --distance square --const-fid
        plink --vcf {input.pruned3} --out {params.prefix3} --allow-extra-chr --autosome-num 95 --distance square --const-fid
        plink --vcf {input.pruned6} --out {params.prefix6} --allow-extra-chr --autosome-num 95 --distance square --const-fid
        """

#generally here are the problems with running lddecay:
#can run with a singularity docker file, but this is not allowed by google life sciences
#so this could be run locally, in theory
#try setting it as a local rule?

#doing custom install fails, becuase there is no conda for  zlib1g-dev
#and "zlib" alone is not enough

# rule ld:
#     input:
#         vcf = "results/{refGenome}/QC/{prefix}_filteredQC.vcf.gz"
#     output:
#         decay = "results/{refGenome}/CCGP/{prefix}.stat.gz",
#         decayplot = "results/{refGenome}/CCGP/{prefix}.LD_decay.png"
#     conda:
#         "envs/ld.yml"
#     params:
#         prefix = lambda wc, input: os.path.join(input.vcf.rsplit("/", 1)[0], "QC", wc.prefix),
#     shell:
#         """
#         sudo apt-get install zlib1g-dev        
#         if [ ! -d PopLDdecay ]; then
#             git clone https://github.com/hewm2008/PopLDdecay.git 
#         fi

#         cd PopLDdecay; chmod 755 configure; ./configure;
#         make;
#         mv PopLDdecay  bin/;   
#         cd ..
#         ./PopLDdecay/bin/PopLDdecay -MaxDist 50 -InVCF {input.vcf} -OutStat {output.decay}
#         ./PopLDdecay/bin/Plot_OnePop.pl -inFile {output.decay} -output {output.decayplot} -keepR

#         """
        # PopLDdecay -MaxDist 50 -InVCF {input.vcf} -OutStat {output.decay}
        # """

# rule ldplot:
#     input:
#         decay = "results/{refGenome}/CCGP/{prefix}.stat.gz"
#     output:
#         decayplot = "results/{refGenome}/CCGP/{prefix}.LD_decay.png"
#     singularity:
#         "shub://jlboat/BioinfoContainers:poplddecay"
#     shell:
#         """
#         Plot_OnePop.pl -inFile {input.decay} -output {output.decayplot} -keepR
#         """

    # shell:
    #     """
    #     bcftools -h
        
    #     if [ ! -d PopLDdecay ]; then
    #         git clone https://github.com/hewm2008/PopLDdecay.git 
    #     fi

    #     cd PopLDdecay; chmod 755 configure; ./configure;
    #     make;
    #     mv PopLDdecay  bin/;   
    #     cd ..
    #     ./PopLDdecay/bin/PopLDdecay -MaxDist 50 -InVCF {input.vcf} -OutStat {params.prefix}
    #     """